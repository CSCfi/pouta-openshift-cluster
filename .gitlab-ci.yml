---
# We use a pre-built deployment container that has necessary tools such as
# Ansible. If you update the deployment container image, remember to update the
# version number here.
image:
  name: gitlab.csc.fi:4567/c14n/poc/poc-deployer-3.11:0.6-test

variables:
  DOCKER_DRIVER: overlay
  GITHUB_MIRROR: git@github.com:CSCfi/pouta-openshift-cluster.git

before_script:
  - cp -r $CI_PROJECT_DIR /opt/deployment/poc
  - cd /opt/deployment
  # Configure SSH so we can clone repos
  - mkdir -p ~/.ssh
  - eval "$(ssh-agent -s)"
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - echo "$CI_RUNNER_SSH_KEY" > ~/.ssh/id_rsa && chmod 0600 ~/.ssh/id_rsa
  # Remove any cached version of openshift-environments and get a fresh version
  - rm -rf openshift-environments
  - git clone $ENVIRONMENTS_REPO_URL openshift-environments
  # Either get the master branch of openshift-environments or feature branch
  # with the same name as the current poc feature branch
  - '(cd openshift-environments; git rev-parse --verify -q remotes/origin/$CI_COMMIT_REF_NAME) &&
     (cd openshift-environments; git checkout $CI_COMMIT_REF_NAME; git pull)'
  - '(cd openshift-environments; git rev-parse --verify -q remotes/origin/$CI_COMMIT_REF_NAME) ||
     (cd openshift-environments; git checkout master; git pull)'
  # Pass some data about the pipeline over to Ansible so it can be used there
  # Built-in GitLab variables are documented here:
  # https://docs.gitlab.com/ee/ci/variables/
  - 'echo "flowdock_api_token: \"$FLOWDOCK_API_TOKEN\"" >> /tmp/gitlab_pipeline_context.yml'
  - 'echo "gitlab_ci_commit_ref_name: \"$CI_COMMIT_REF_NAME\"" >> /tmp/gitlab_pipeline_context.yml'
  - 'echo "gitlab_ci_commit_sha: \"$CI_COMMIT_SHA\"" >> /tmp/gitlab_pipeline_context.yml'
  - 'echo "gitlab_ci_pipeline_id: \"$CI_PIPELINE_ID\"" >> /tmp/gitlab_pipeline_context.yml'

stages:
  - ci_env_deploy
  - ci_setup_dedicated_egress_ips
  - ci_run_tests
  - ci_backups
  - cleanup
  - qa_env_deploy
  - qa_setup_dedicated_egress_ips
  - qa_run_tests
  - mirroring
  - prod_deploy
  - scheduled_backups

deploy_ci_openshift_job:
  stage: ci_env_deploy
  variables:
    ENV_NAME: oso-ci-singlemaster
  except:
    - schedules
  script:
    - ./run_playbook.bash site.yml -e @/tmp/gitlab_pipeline_context.yml
  environment:
    name: oso-ci

run_ci_dedicated_egress_ips_job:
  stage: ci_setup_dedicated_egress_ips
  variables:
    ENV_NAME: oso-ci-singlemaster
  except:
    - schedules
  script:
    - ./run_playbook.bash dedicated_ip_namespaces_create.yml -e @/tmp/gitlab_pipeline_context.yml
    - ./run_playbook.bash dedicated_ip_namespaces_setup.yml -e @/tmp/gitlab_pipeline_context.yml

run_ci_tests_openshift_job:
  stage: ci_run_tests
  variables:
    ENV_NAME: oso-ci-singlemaster
  except:
    - schedules
  script:
    - ./run_playbook.bash ../tests/site.yml -e @/tmp/gitlab_pipeline_context.yml

backup_ci_openshift_job:
  stage: ci_backups
  variables:
    ENV_NAME: oso-ci-singlemaster
  except:
    - schedules
  script:
    - ./run_backup.bash

deprovision_ci_openshift_job:
  stage: cleanup
  variables:
    ENV_NAME: oso-ci-singlemaster
  except:
    - schedules
  script:
    - ./run_playbook.bash deprovision.yml
  when: always

deploy_qa_openshift_job:
  stage: qa_env_deploy
  variables:
    ENV_NAME: oso-qa
  except:
    - schedules
  script:
    - ./run_playbook.bash site.yml -e @/tmp/gitlab_pipeline_context.yml
  environment:
    name: oso-qa
  only:
    - master
  tags:
    - oso-qa

run_qa_dedicated_egress_ips_job:
  stage: qa_setup_dedicated_egress_ips
  variables:
    ENV_NAME: oso-qa
  except:
    - schedules
  script:
    - ./run_playbook.bash dedicated_ip_namespaces_setup.yml -e @/tmp/gitlab_pipeline_context.yml
  environment:
    name: oso-qa
  only:
    - master
  tags:
    - oso-qa

run_qa_tests_openshift_job:
  stage: qa_run_tests
  variables:
    ENV_NAME: oso-qa
  except:
    - schedules
  script:
    - ./run_playbook.bash ../tests/site.yml -e @/tmp/gitlab_pipeline_context.yml
  only:
    - master
  tags:
    - oso-qa

mirror_to_github:
  stage: mirroring
  except:
    - schedules
  script:
    - rm -rf poc-bare
    - git clone --bare $CI_REPOSITORY_URL poc-bare
    - cd poc-bare
    - git push --mirror $GITHUB_MIRROR

deploy_rahti_int_job:
  stage: prod_deploy
  variables:
    ENV_NAME: rahti-int
  except:
    - schedules
  script:
    - ./run_backup.bash
    - ./run_playbook.bash site.yml -e @/tmp/gitlab_pipeline_context.yml
  environment:
    name: production/rahti-int
  when: manual
  only:
    - master
  tags:
    - rahti-int

deploy_rahti_job:
  stage: prod_deploy
  variables:
    ENV_NAME: rahti
  except:
    - schedules
  script:
    - ./run_backup.bash
    - ./run_playbook.bash site.yml -e @/tmp/gitlab_pipeline_context.yml
  environment:
    name: production/rahti
  when: manual
  only:
    - master
  tags:
    - rahti

deploy_valinor_job:
  stage: prod_deploy
  variables:
    ENV_NAME: varda
  except:
    - schedules
  script:
    - ./run_backup.bash
    - ./run_playbook.bash site.yml -e @/tmp/gitlab_pipeline_context.yml
  environment:
    name: production/valinor
  when: manual
  only:
    - master
  tags:
    - valinor

scheduled_backups_oso_qa_job:
  stage: scheduled_backups
  variables:
    ENV_NAME: oso-qa
  script:
    - ./run_backup.bash
  only:
    - schedules
  tags:
    - oso-qa

scheduled_backups_rahti_int_job:
  stage: scheduled_backups
  variables:
    ENV_NAME: rahti-int
  script:
    - ./run_backup.bash
  only:
    - schedules
  tags:
    - rahti-int

scheduled_backups_rahti_job:
  stage: scheduled_backups
  variables:
    ENV_NAME: rahti
  script:
    - ./run_backup.bash
  only:
    - schedules
  tags:
    - rahti

scheduled_backups_valinor_job:
  stage: scheduled_backups
  variables:
    ENV_NAME: varda
  script:
    - ./run_backup.bash
  only:
    - schedules
  tags:
    - valinor
