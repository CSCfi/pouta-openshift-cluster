---
- name: Run tests on bastion
  hosts: bastion
  tasks:
    - block:
        - name: collect remote test names
          shell: (cd /tmp/poc/tests && ls -d bats_test_bastion*)
          register: test_directories

        - name: run bats tests
          shell: './generic_bats_wrapper.bash {{ item }} >> /tmp/poc/tests/test_results.log'
          args:
            chdir: '/tmp/poc/tests'
          with_items: "{{ test_directories.stdout_lines }}"
          when:
            - item not in poc_test_blacklist|default([])

      always:
        - name: put test results in a var
          command: 'cat /tmp/poc/tests/test_results.log'
          register: test_results

        - name: print test output in human readable form
          debug:
            var: "{{ test_results.stdout.split('\n') | quote }}"

        - name: cleanup test files
          file:
            path: /tmp/poc
            state: absent
          when:
            - test_cleanup|default(true)|bool == true

- name: Run tests on masters
  hosts: masters
  tasks:
    - block:
        - name: collect remote test names
          shell: (cd /tmp/poc/tests && ls -d bats_test_master*)
          register: test_directories

        - name: run bats tests
          shell: >
            POC_DEPLOY_MONITORING={{ deploy_monitoring|bool }}
            ./generic_bats_wrapper.bash {{ item }} >> /tmp/poc/tests/test_results.log
          args:
            chdir: '/tmp/poc/tests'
          with_items: "{{ test_directories.stdout_lines }}"
          when:
            - item not in poc_test_blacklist|default([])

        - name: collect remote test names
          shell: (cd /tmp/poc/tests && ls -d bats_test_openshift*)
          register: test_directories

        - name: run bats tests from OpenShift project context
          shell: './openshift_bats_wrapper.bash {{ item }} >> /tmp/poc/tests/test_results.log'
          args:
            chdir: '/tmp/poc/tests'
          with_items: "{{ test_directories.stdout_lines }}"
          when:
            - item not in poc_test_blacklist|default([])

      always:
        - name: put test results in a var
          command: 'cat /tmp/poc/tests/test_results.log'
          register: test_results

        - name: print test output in human readable form
          debug:
            var: "{{ test_results.stdout.split('\n') | quote }}"

        - name: cleanup test files
          file:
            path: /tmp/poc
            state: absent
          when:
            - test_cleanup|default(true)|bool == true
