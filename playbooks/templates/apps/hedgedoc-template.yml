apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: hedgeDoc
  template: hedgeDoc
message: HedgeDoc template
metadata:
  annotations:
    description: Deploys a HedgeDoc instance 
    iconClass: "hedgedoc-icon"
    openshift.io/display-name: hedgedoc
    openshift.io/provider-display-name: CSC
  name: hedgedocs

parameters:
  - name: APPNAME
    required: true
    description: Name of your application
    displayName: Application Name

  - name: DOMAIN_SUFFIX
    required: true
    description: Domain name where the application will be available
    displayName: Domain name
    value: rahtiapp.fi

  - name: HEDGEDOC_IMAGE
    required: true
    description: Image for the HedgeDoc application
    displayName: HedgeDoc image
    value: quay.io/hedgedoc/hedgedoc:1.9.8

  - name: POSTGRES_IMAGE
    required: true
    description: Image for the PostGres application
    displayName: PostGres image
    value: quay.io/centos7/postgresql-12-centos7:latest

  - name: UPLOADS_STORAGE
    required: true
    description: Storage space for the uploaded files
    displayName: Uploads storage
    value: "20Gi"

  - name: DB_STORAGE
    required: true
    description: Storage space for the database
    displayName: Uploads storage
    value: "100Mi"

  - name: DB_PASSWORD
    required: true
    description: Database password
    displayName: Autogenerated database password
    from: '[a-zA-Z0-9]{32}'
    generate: expression

objects:
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
    labels:
      io.kompose.service: hedgeapp
    name: hedgeapp
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        io.kompose.service: hedgeapp
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          io.kompose.service: hedgeapp
      spec:
        containers:
        - env:
          - name: CMD_DOMAIN
            value: ${APPNAME}.${DOMAIN_SUFFIX}
          - name: CMD_URL_ADDPORT
            value: "false"
          - name: CMD_PROTOCOL_USESSL
            value: "true"
          - name: CMD_DB_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: CMD_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql
          - name: CMD_DB_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: postgresql
          - name: CMD_DB_HOST
            value: postgresql
          - name: CMD_DB_PORT
            value: "5432"
          - name: CMD_DB_DIALECT
            value: postgres
          - name: CMD_ALLOW_FREEURL
            value: 'true'
          - name: CMD_REQUIRE_FREEURL_AUTHENTICATION
            value: 'true'
          image: ${HEDGEDOC_IMAGE}
          imagePullPolicy: IfNotPresent
          name: hedgeapp
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /hedgedoc/public/uploads
            name: uploads
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: uploads
          persistentVolumeClaim:
            claimName: uploads
  status: {}

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    generation: 2
    labels:
      app: postgresql-persistent
    name: postgresql
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: postgresql
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          name: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: postgresql
          image: ${POSTGRES_IMAGE}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql
    test: false
    triggers: {}
  status: {}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      app: postgresql-persistent
    name: postgresql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_STORAGE}
    storageClassName: glusterfs-storage
  status: {}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      io.kompose.service: uploads
    name: uploads
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${UPLOADS_STORAGE}
    storageClassName: glusterfs-storage
  status: {}

- apiVersion: v1
  stringData:
    database-name: hedgedoc 
    database-password: ${DB_PASSWORD}
    database-user: hedgedoc
  kind: Secret
  metadata:
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: hedgeapp
    name: hedgeapp
  spec:
    ports:
    - name: "3000"
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      io.kompose.service: hedgeapp
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: postgresql-persistent
    name: postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: hedgeDoc
      io.kompose.service: hedgeapp
    name: hedgeapp
  spec:
    host: ${APPNAME}.${DOMAIN_SUFFIX}
    port:
      targetPort: "3000"
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: hedgeapp
      weight: 100
    wildcardPolicy: None
  status: {}