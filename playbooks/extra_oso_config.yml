---
- name: Import objects through first master
  hosts: masters
  run_once: true
  roles:
    - role: poc_facts
    - role: csi_cinder
    - role: openshift_webconsole_logo
      when: webconsole_logo_extension_url is defined
  tasks:
    - name: remove infra label from master nodes if there are infra nodes
      shell: oc label node "{{ item }}" node-role.kubernetes.io/infra-
      with_items: "{{ groups['masters'] }}"
      when: groups['infra'] | default([]) | length > 0

    - name: update storage classes (1st pass)
      k8s:
        state: present
        force: true
        definition: "{{ item }}"
      with_items: "{{ storage_classes|default([]) }}"
      ignore_errors: true
      register: sc_updates
      when:
        - skip_pvc|default(false) == false
        - item.metadata.name in active_storage_classes

    - name: delete storage classes that failed to update due to a 422 error (parameter updates are not supported)
      k8s:
        state: absent
        api_version: v1
        kind: StorageClass
        name: "{{ item.item.metadata.name }}"
      with_items: "{{ sc_updates.results }}"
      when:
        - item.failed|default(false)
        - item.error == 422
        - skip_pvc|default(false) == false

    - name: update storage classes (2nd pass)
      k8s:
        state: present
        definition: "{{ item }}"
      with_items: "{{ storage_classes|default([]) }}"
      when:
        - skip_pvc|default(false) == false
        - item.metadata.name in active_storage_classes

    - name: copy nfs_pv definitions to first master
      copy:
        src: /tmp/nfs_pv
        dest: /home/cloud-user/
      when: provision_nfs_pvs|default(false)|bool

    - name: create PVs
      shell: for vol in nfs_pv/persistent-volume.pvol*; do oc create -f $vol; done
      failed_when: false
      when: provision_nfs_pvs|default(false)|bool

    - name: copy default project template to first master
      template:
        src: "{{ oso_default_project_request|default('templates/project-request.yaml') }}"
        dest: /home/cloud-user/project-request.yaml

    - name: check if project template exists
      shell: oc get template -n default project-request-default
      register: existing_template
      changed_when: false
      failed_when: false

    - name: import project template
      shell: oc create -n default -f /home/cloud-user/project-request.yaml
      when: existing_template.stdout_lines | length == 0

    - name: update project template
      shell: oc replace -n default -f /home/cloud-user/project-request.yaml
      when: existing_template.stdout_lines | length > 0

    - name: get heketi deployment config
      oc_obj:
        state: list
        kind: deploymentconfig
        namespace: "glusterfs"
        name: "heketi-storage"
      register: glusterfs_heketi_deployment_config
      
    - name: create heketi secret
      oc_secret:
        namespace: "glusterfs"
        state: present
        name: "heketi-storage-admin-secret"
        type: "kubernetes.io/glusterfs"
        force: True
        contents:
          - path: key
            data: "{{ (glusterfs_heketi_deployment_config.module_results.results[0].spec.template.spec.containers[0].env | selectattr('name', 'match', '^HEKETI_ADMIN_KEY$') | first).value }}"

    - name: replace default route for Heketi with a more secure one (TLS+whitelist)
      include: tasks/upsert_k8s_object.yml
      vars:
        namespace: glusterfs
        template_base_name: heketi-storage-route.yaml.j2
        name: heketi-storage
        upsert_replace: true

    - name: image, nodeSelector and memory limit changes to heketi-storage
      oc_edit:
        namespace: glusterfs
        kind: dc
        name: heketi-storage
        content:
          spec.template.spec.nodeSelector:
            type: master
          spec.template.spec.containers[0].resources.limits.memory: "{{ poc_heketi_memory_limit|default('1Gi') }}"
          spec.template.spec.containers[0].resources.requests.memory: "{{ poc_heketi_memory_request|default('1Gi') }}"
          spec.template.spec.containers[0].image: "{{ poc_heketi_image|default('heketi/heketi:6') }}"
          spec.template.spec.containers[0].imagePullPolicy: Always

    - name: Deploy glusterblock-storage-provisioner-dc on master nodes by adding a node selector
      oc_edit:
        namespace: glusterfs
        kind: deploymentconfig
        name: glusterblock-storage-provisioner-dc
        content:
          spec.template.spec.nodeSelector:
            node-role.kubernetes.io/infra: 'true'
      when:
        - set_glusterblock_storage_provisioner_node_selector|default(true)|bool
        - openshift_storage_glusterfs_block_deploy|default(true)|bool
        - openshift_storage_glusterfs_is_native|default(false)|bool

    - name: Deploy openshift-metrics-server on infra nodes by adding a node selector
      oc_edit:
        namespace: openshift-metrics-server
        kind: deployment
        name: metrics-server
        content:
          spec.template.spec.nodeSelector:
            node-role.kubernetes.io/infra: 'true'
      when:
        - openshift_metrics_install_metrics|default(true)|bool
