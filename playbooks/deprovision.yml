---
- hosts: localhost
  gather_facts: no
  connection: local
  roles:
    - poc_facts
  tasks:
    - name: make sure we are allowed to deprovision
      assert:
        that:
          - "{{ deprovision_allowed|default(False) }} == True"
        msg: "Must set deprovision_allowed to True to deprovision"

- name: Get info on volumes to delete
  gather_facts: no
  hosts: masters
  run_once: yes
  tasks:
    - name: get names of dynamically provisioned cinder volumes
      shell: oc get pv -o jsonpath='{.items[?(@.spec.csi.driver)].metadata.name}'
      register: volume_name_result
      failed_when: false

    - name: put volume names in a list
      set_fact:
        cinder_volume_names: "{{ volume_name_result.stdout.split() }}"
      when: volume_name_result.rc == 0

    - name: show volumes to delete
      debug:
        var: cinder_volume_names
      when: volume_name_result.rc == 0

- hosts: localhost
  gather_facts: no
  connection: local
  roles:
    - poc_facts
  tasks:

    - name: Disassociate floating IP from bastion
      os_floating_ip:
        server: "{{ cluster_name }}-bastion"
        floating_ip_address: "{{ bastion_public_ip }}"
        state: absent
      failed_when: false

    - name: Disassociate floating IP from first LB node
      os_floating_ip:
        server: "{{ cluster_name }}-lb-1"
        floating_ip_address: "{{ openshift_public_ip }}"
        state: absent
      failed_when: false
      when: master_vm_group_size > 1

    - name: Disassociate floating IP from first master node
      os_floating_ip:
        server: "{{ cluster_name }}-master-1"
        floating_ip_address: "{{ openshift_public_ip }}"
        state: absent
      failed_when: false
      when: master_vm_group_size == 1

    - name: Delete public key
      os_keypair:
        state: absent
        name: "{{ cluster_name }}"

    - name: Delete compute nodes stacks
      os_stack:
        name: "{{ cluster_name }}-{{ item.stack_name }}"
        state: absent
        wait: yes
      with_items: "{{ compute_node_groups }}"

    - name: Delete stack {{ cluster_name }}-etcd (multimaster)
      os_stack:
        name: "{{ cluster_name }}-etcd"
        state: absent
        wait: yes

    - name: Delete stack {{ cluster_name }}-cluster
      os_stack:
        name: "{{ cluster_name }}-cluster"
        state: absent
        wait: yes

    - name: Delete stack {{ cluster_name }}-glusterfs
      os_stack:
        name: "{{ cluster_name }}-glusterfs"
        state: absent
        wait: yes

    - name: Delete stack {{ cluster_name }}-base
      os_stack:
        name: "{{ cluster_name }}-base"
        state: absent
        wait: yes

    - name: Delete dynamically created Cinder volumes
      os_volume:
        display_name: "{{ item }}"
        state: absent
      with_items: "{{ hostvars[groups['masters'][0]]['cinder_volume_names']|default([]) }}"
      when: groups['masters']|length > 0

    - name: Assert the potential of having leftover cinder volumes
      assert:
        that:
          - hostvars[groups['masters'][0]]['volume_name_result'].rc == 0
        msg: >
          There might be some leftover Cinder volumes which need to be deleted manually.
          Please check the list of volumes by running: "openstack volume list", and
          manually deleting them with: "openstack volume delete <VOLUME_NAME>"
      when: groups['masters']|length > 0

    - name: Remove inventory cache
      file:
        path: "{{ lookup('env', 'HOME') }}/.cache/openstack/ansible-inventory.cache"
        state: absent
