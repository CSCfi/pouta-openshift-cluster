---
- name: Prepare bastion for backups
  hosts: bastion
  gather_facts: no
  tasks:
    - name: ensure backup base dirs exist on bastion
      file:
        path: "{{ backup_bastion_base_dir }}/{{ item }}"
        state: directory
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: 0750
      with_items:
        - "{{ groups['masters'] }}"
        - "{{ groups['etcd'] }}"
        - "{{ groups['glusterfs'] }}"

- name: Backup etcd
  hosts: etcd
  become: yes
  gather_facts: yes
  vars:
    - backup_time: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"
    - r_etcd_common_backup_tag: "{{ cluster_name }}"
    - r_etcd_common_backup_sufix_name: "/{{ backup_time }}"
    - r_etcd_common_embedded_etcd: False
    - etcd_backup_root: "/var/lib/etcd"
    - openshift_is_containerized: "{{ containerized }}"
  tasks:
    - include_role:
        name: etcd
        tasks_from: backup

    - name: archive etcd backup
      archive:
        path: "{{ etcd_backup_root }}/openshift-backup-{{ cluster_name }}"
        dest: "{{ etcd_backup_root }}/openshift-backup-{{ cluster_name }}.tar.gz"

    - name: archive /etc/etcd
      archive:
        path: "/etc/etcd"
        dest: "/etc/etcd/etc-etcd-{{ inventory_hostname }}.tar.gz"

    - name: sync etcd backup to bastion
      synchronize:
        src: "{{ etcd_backup_root }}/openshift-backup-{{ cluster_name }}.tar.gz"
        dest: "{{ backup_bastion_base_dir }}/{{ inventory_hostname }}/openshift-backup-{{ cluster_name }}-{{ backup_time }}.tar.gz"
        mode: pull
      delegate_to: "{{ hostvars[groups['bastion'][0]]['inventory_hostname'] }}"

    - name: sync /etc/etcd archive to bastion
      synchronize:
        src: "/etc/etcd/etc-etcd-{{ inventory_hostname }}.tar.gz"
        dest: "{{ backup_bastion_base_dir }}/{{ inventory_hostname }}/etc-etcd-{{ inventory_hostname }}-{{ backup_time }}.tar.gz"
        mode: pull
      delegate_to: "{{ hostvars[groups['bastion'][0]]['inventory_hostname'] }}"

    - name: remove etcd backup from etcd host
      file:
        path: "{{ etcd_backup_root }}/openshift-backup-{{ cluster_name }}"
        state: absent

    - name: remove etcd backup archive from etcd host
      file:
        path: "{{ etcd_backup_root }}/openshift-backup-{{ cluster_name }}.tar.gz"
        state: absent

    - name: remove /etc/etcd backup from etcd host
      file:
        path: "/etc/etcd/etc-etcd-{{ inventory_hostname }}.tar.gz"
        state: absent


- name: Backup masters
  hosts: masters
  become: yes
  gather_facts: no
  vars:
    - backup_time: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"
  tasks:

    - name: archive /etc/origin
      archive:
        path: '/etc/origin'
        dest: "/etc/origin/etc-origin-{{ inventory_hostname }}.tar.gz"

    - name: sync /etc/origin archive to bastion
      synchronize:
        src: "/etc/origin/etc-origin-{{ inventory_hostname }}.tar.gz"
        dest: "{{ backup_bastion_base_dir }}/{{ inventory_hostname }}/etc-origin-{{ inventory_hostname }}-{{ backup_time }}.tar.gz"
        mode: pull
      delegate_to: "{{ hostvars[groups['bastion'][0]]['inventory_hostname'] }}"

    - name: remove /etc/origin archive from master
      file:
        path: "/etc/origin/etc-origin-{{ inventory_hostname }}.tar.gz"
        state: absent

    - name: install heketi python client libraries in a virtual environment
      pip:
        name: "git+https://github.com/heketi/heketi.git@release/6#subdirectory=client/api/python"
        virtualenv: "~/backup/venv"

    - name: drop backup script to ansible user's home directory
      copy:
        src: "files/heketi_backup.py"
        dest: "~/backup/heketi_backup.py"
        mode: 0755

    - name: get Heketi secret
      oc_secret:
        state: list
        namespace: glusterfs
        name: heketi-storage-admin-secret
        decode: True
      register: heketi_secret
      run_once: true

    - name: backup Heketi BoltDB via Heketi API
      shell: >
        ~/backup/venv/bin/python ~/backup/heketi_backup.py
        --user admin
        --key {{ heketi_secret.results.decoded.key }}
        --host https://heketi-storage-glusterfs.{{ openshift_public_hostname }}
        --file /tmp/heketi.db
      run_once: true

    - name: sync Heketi BoltDB backup to bastion
      synchronize:
        src: "/tmp/heketi.db"
        dest: "{{ backup_bastion_base_dir }}/{{ inventory_hostname }}/heketi-{{ backup_time }}.db"
        mode: pull
      delegate_to: "{{ hostvars[groups['bastion'][0]]['inventory_hostname'] }}"
      run_once: true

    - name: remove Heketi BoltDB backup from master
      file:
        path: "/tmp/heketi.db"
        state: absent
      run_once: true

    - name: get topology information from Heketi
      shell: >
        oc rsh -n glusterfs dc/heketi-storage
        heketi-cli --user admin --secret {{ heketi_secret.results.decoded.key }}
        topology info --json
      run_once: true
      register: heketi_topology

    - name: write Heketi topology info into a file
      copy:
        content: "{{ heketi_topology.stdout }}"
        dest: /tmp/heketi-topo.json
      run_once: true

    - name: sync Heketi topology JSON file to bastion
      synchronize:
        src: "/tmp/heketi-topo.json"
        dest: "{{ backup_bastion_base_dir }}/{{ inventory_hostname }}/heketi-topo-{{ backup_time }}.json"
        mode: pull
      delegate_to: "{{ hostvars[groups['bastion'][0]]['inventory_hostname'] }}"
      run_once: true

    - name: remove Heketi topology JSON from master
      file:
        path: "/tmp/heketi-topo.json"
        state: absent
      run_once: true

- name: Backup glusterfs
  hosts: glusterfs
  become: yes
  gather_facts: no
  vars:
    - backup_time: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"
  tasks:
    # here we have to use tar directly because archive module does not handle broken symlinks
    # properly
    - name: archive glusterfs and heketi config
      shell: >
        tar cfz /tmp/glusterfs-{{ inventory_hostname }}.tar.gz
        /etc/glusterfs
        /var/lib/glusterd
        /var/lib/heketi
      tags:
        - skip_ansible_lint

    - name: sync glusterfs archive to bastion
      synchronize:
        src: "/tmp/glusterfs-{{ inventory_hostname }}.tar.gz"
        dest: "{{ backup_bastion_base_dir }}/{{ inventory_hostname }}/glusterfs-{{ inventory_hostname }}-{{ backup_time }}.tar.gz"
        mode: pull
      delegate_to: "{{ hostvars[groups['bastion'][0]]['inventory_hostname'] }}"

    - name: remove glusterfs archive from master
      file:
        path: "/tmp/glusterfs-{{ inventory_hostname }}.tar.gz"
        state: absent

- name: Clean up old backup data from bastion
  hosts: bastion
  gather_facts: no
  vars:
    - l_backup_retention_time: "{{ backup_retention_time|default('1w') }}"
  tasks:
    - name: get backup dirs older than {{ l_backup_retention_time }}
      find:
        path: "{{ backup_bastion_base_dir }}"
        age: "{{ l_backup_retention_time }}"
        recurse: yes
        file_type: directory
      register: old_backup_dirs

    - name: remove old backup dirs
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ old_backup_dirs.files }}"

    - name: get backup files older than {{ l_backup_retention_time }}
      find:
        path: "{{ backup_bastion_base_dir }}"
        age: "{{ l_backup_retention_time }}"
        recurse: yes
        file_type: file
      register: old_backup_files

    - name: remove old backup files
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ old_backup_files.files }}"
