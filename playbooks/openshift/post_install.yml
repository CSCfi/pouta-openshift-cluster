- name: Run NFS volume creation
  include: ../../../openshift-ansible-tourunen/setup_lvm_nfs.yml
  when: provision_nfs_pvs|default(false)|bool

- name: Import objects through first master
  hosts: masters[0]
  tasks:
    - name: copy nfs_pv definitions to first master
      copy:
        src: /tmp/nfs_pv
        dest: /home/cloud-user/
      when: provision_nfs_pvs|default(false)|bool

    - name: create PVs
      shell: for vol in nfs_pv/persistent-volume.pvol*; do oc create -f $vol; done
      failed_when: false
      when: provision_nfs_pvs|default(false)|bool

    - name: copy default project template to first master
      template:
        src: "{{ oso_default_project_request|default('templates/project-request.yaml') }}"
        dest: /home/cloud-user/project-request.yaml

    - name: check if project template exists
      shell: oc get template -n default project-request-default
      register: existing_template
      changed_when: false
      failed_when: false

    - name: import project template
      shell: oc create -n default -f /home/cloud-user/project-request.yaml
      when: existing_template.stdout_lines | length == 0

    - name: update project template
      shell: oc replace -n default -f /home/cloud-user/project-request.yaml
      when: existing_template.stdout_lines | length > 0

    - name: copy StorageClass object template for Cinder storage
      template:
        src: "templates/cinder-storageclass.yaml.j2"
        dest: /home/cloud-user/cinder-storageclass.yaml
      register: storageclass_template

    - name: check if StorageClass exists
      shell: "oc get storageclass -n default {{ storage_class_name }}"
      register: existing_storageclass
      changed_when: false
      failed_when: false

    - name: create StorageClass object
      shell: oc create -n default -f /home/cloud-user/cinder-storageclass.yaml
      when: existing_storageclass.stdout_lines | length == 0

    - name: update StorageClass object
      shell: oc replace -n default -f /home/cloud-user/cinder-storageclass.yaml
      when: existing_storageclass.stdout_lines | length > 0
      changed_when: storageclass_template.changed

    - name: check if registry PVC exists
      shell: oc get pvc -n default registry
      register: existing_registry_pv
      changed_when: false
      failed_when: false

    - name: add a persistent volume to the registry
      shell: oc volume -n default dc/docker-registry --add --mount-path=/registry --overwrite --name=registry-storage -t pvc --claim-size=200Gi --claim-name=registry
      when: existing_registry_pv.stdout_lines | length == 0

    # block for conditionally deploying default-www-app
    - block:
      - name: check if project default-www exists
        shell: oc get projects | grep default-www
        register: existing_default_www
        changed_when: false
        failed_when: false

      - name: create project default-www
        shell: oc new-project default-www && oc project default
        when: existing_default_www.stdout_lines | length == 0

      - name: check if app has been deployed
        shell: oc get dc -n default-www default-www-app
        register: existing_default_www_app
        changed_when: false
        failed_when: false

      - name: create app
        shell: oc new-app -n default-www --name default-www-app {{ default_www_app_image }}
        when: existing_default_www_app.stdout_lines | length == 0

      - name: set environment variables
        shell: oc set env -n default-www dc/default-www-app {{ item }}
        with_items:
        - PLATFORM_NAME={{ cluster_name }}
        - PLATFORM_API_URL=https://{{ openshift_public_hostname }}:8443
        - PLATFORM_APP_BASE_NAME={{ openshift_public_hostname }}
        when: existing_default_www_app.stdout_lines | length == 0

      - name: create routes
        shell: |
          oc create route edge default-www-{{ item.name }} \
          -n default-www \
          --service default-www-app --insecure-policy=Redirect \
          --hostname {{ item.hostname|default(item.name + "." + openshift_public_hostname) }}
        with_items:
        - name: default
          hostname: "{{ openshift_public_hostname }}"
        - name: www
        - name: admin
        failed_when: false
      when:
      - deploy_default_www_app | default(false) | bool
      - default_www_app_image is defined

- name: Deploy monitoring
  include: deploy_monitoring.yml
  when: deploy_monitoring|default(false)|bool
