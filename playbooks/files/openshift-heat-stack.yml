---
heat_template_version: 2015-10-15

description: >
  Provision resources for OpenShift.

parameters:
  env_name:
    description: >
      A name for the OpenShift environment to be used for naming resources.
    type: string
    default: { get_param: 'OS::stack_name' }
  bastion_allow_ports:
    description: >
      Which ports to allow connections to on the bastion host.
    type: comma_delimited_list
    default: '22'
  bastion_allow_cidrs:
    description: >
      The CIDRs of the networks where the bastion host should be accessible
      from.
    type: comma_delimited_list
    default: '0.0.0.0/0'
  secgroup_ext_access_rules:
    description: >
      Rules for the security group that governs external access to the system.
    type: json
  openshift_network_cidr:
    description: >
      What CIDR to use for the dedicated cluster network.
    type: string
    default: '192.168.10.0/24'
  openshift_network_dns_servers:
    description: >
      What DNS servers to use in the dedicated cluster network.
    type: comma_delimited_list
    default: '193.166.4.24,193.166.4.25'
  openshift_router:
    description: >
      The router to which the dedicated cluster network should be connected to
      for external access.
    type: string
  key_name:
    description: >
      The name of the SSH key to initially insert into VMs.
    type: string
  bastion_vm_image:
    description: >
      What OpenStack image to use for the bastion host.
    type: string
  bastion_vm_flavor:
    description: >
      What OpenStack flavor to use for the bastion host.
    type: string
  bastion_cloud_config:
    description: >
      Configuration for cloud-init for the bastion host.
    type: json
  etcd_vm_group_size:
    description: >
      How many virtual machines to put in the etcd cluster.
    type: number
  etcd_vm_image:
    description: >
      What OpenStack image to use for etcd hosts.
    type: string
  etcd_vm_flavor:
    description: >
      What OpenStack flavor to use for etcd hosts.
    type: string
  lb_vm_group_size:
    description: >
      How many load balancer VMs to start.
    type: number
  lb_vm_image:
    description: >
      What OpenStack image to use for load balancer hosts.
    type: string
  lb_vm_flavor:
    description: >
      What OpenStack flavor to use for load balancer VMs.
    type: string
  lb_vol_size:
    description: >
      The size of the Cinder volume to attach to LB VMs.
    type: number
  nfs_vm_group_size:
    description: >
      How many NFS VMs to start.
    type: number
  nfs_vm_image:
    description: >
      What OpenStack image to use for NFS hosts.
    type: string
  nfs_vm_flavor:
    description: >
      What OpenStack flavor to use for NFS VMs.
    type: string
  nfs_vol_size:
    description: >
      The size of the Cinder volume to attach to NFS VMs.
    type: number
  master_vm_group_size:
    description: >
      How many master VMs to start.
    type: number
  master_vm_image:
    description: >
      What OpenStack image to use for master hosts.
    type: string
  master_vm_flavor:
    description: >
      What OpenStack flavor to use for master VMs.
    type: string
  node_ssd_vm_group_size:
    description: >
      How many SSD node VMs to start.
    type: number
  node_ssd_vm_image:
    description: >
      What OpenStack image to use for SSD nodes.
    type: string
  node_ssd_vm_flavor:
    description: >
      What OpenStack flavor to use for SSD node VMs.
    type: string

resources:

  #-----------------------------------
  # Security groups
  #-----------------------------------

  secgroup_bastion:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: "bastion"
      rules:
        repeat:
          for_each:
            <%port%>: { get_param: bastion_allow_ports }
            <%cidr%>: { get_param: bastion_allow_cidrs }
          template:
            protocol: tcp
            port_range_min: <%port%>
            port_range_max: <%port%>
            remote_ip_prefix: <%cidr%>

  secgroup_common:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: "common"
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_resource: secgroup_bastion }
        - remote_mode: remote_group_id
          protocol: icmp
        - remote_mode: remote_group_id
          protocol: udp
          port_range_min: 4789
          port_range_max: 4789

  secgroup_infra:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: infra
      rules:
        - remote_mode: remote_group_id

  secgroup_lb:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: lb
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_resource: secgroup_common }

  secgroup_ext_access:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: "ext-access"
      rules: { get_param: secgroup_ext_access_rules }

  secgroup_master:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: master
      rules:
       - protocol: udp
         port_range_min: 53
         port_range_max: 53
         remote_mode: remote_group_id
         remote_group_id: { get_resource: secgroup_common }
       - protocol: tcp
         port_range_min: 53
         port_range_max: 53
         remote_mode: remote_group_id
         remote_group_id: { get_resource: secgroup_common }
       - protocol: tcp
         port_range_min: 8443
         port_range_max: 8443
         remote_mode: remote_group_id
         remote_group_id: { get_resource: secgroup_common }

  secgroup_nfs:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: nfs
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_resource: secgroup_common }
          protocol: tcp
          port_range_min: 2049
          port_range_max: 2049

  secgroup_node:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: node
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_resource: secgroup_infra }

  #-----------------------------------
  # Dedicated cluster network
  #-----------------------------------

  openshift_network:
    type: OS::Neutron::Net
    properties:
       name:
         str_replace:
            template: env_name-name_suffix
            params:
              env_name: { get_param: env_name }
              name_suffix: "network"

  openshift_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: openshift_network }
      cidr: { get_param: openshift_network_cidr }
      dns_nameservers: { get_param: openshift_network_dns_servers }

  openshift_subnet_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_param: openshift_router }
      subnet: { get_resource: openshift_subnet }

  #-----------------------------------
  # Bastion VM
  #-----------------------------------

  bastion_cloud_config_resource:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config: { get_param: bastion_cloud_config }

  bastion:
    type: OS::Nova::Server
    depends_on: "openshift_subnet"
    properties:
      name:
        str_replace:
          template: env_name-name_suffix
          params:
            env_name: { get_param: env_name }
            name_suffix: "bastion"
      image: { get_param: bastion_vm_image }
      networks:
        - network: { get_resource: openshift_network }
      flavor: { get_param: bastion_vm_flavor }
      metadata:
        group: "bastion"
        stack: { get_param: env_name }
      key_name: { get_param: key_name }
      security_groups:
        - { get_resource: secgroup_bastion }
      user_data: { get_resource: bastion_cloud_config_resource }
      user_data_format: RAW

  #-----------------------------------
  # Nova server groups (anti-affinity)
  #-----------------------------------

  etcd:
    type: OS::Nova::ServerGroup
    properties:
      name: etcd
      policies: ['anti-affinity']

  lb:
    type: OS::Nova::ServerGroup
    properties:
      name: lb
      policies: ['anti-affinity']

  nfs:
    type: OS::Nova::ServerGroup
    properties:
      name: nfs
      policies: ['anti-affinity']

  master:
    type: OS::Nova::ServerGroup
    properties:
      name: master
      policies: ['anti-affinity']

  node_ssd:
    type: OS::Nova::ServerGroup
    properties:
      name: node_ssd
      policies: ['anti-affinity']

  #-----------------------------------
  # VM resource groups
  #-----------------------------------

  etcd_vm_group:
    type: OS::Heat::ResourceGroup
    depends_on: "openshift_subnet"
    properties:
      count: { get_param: etcd_vm_group_size }
      resource_def:
        type: OS::Nova::Server
        properties:
          name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: "etcd"
          image: { get_param: etcd_vm_image }
          networks:
            - network: { get_resource: openshift_network }
          flavor: { get_param: etcd_vm_flavor }
          metadata:
            group: "etcd"
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_infra }
            - { get_resource: secgroup_common }
          scheduler_hints:
            group: { get_resource: etcd }

  lb_vm_group:
    type: OS::Heat::ResourceGroup
    depends_on: "openshift_subnet"
    properties:
      count: { get_param: lb_vm_group_size }
      resource_def:
        type: vm_with_volume.yaml
        properties:
          vm_name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: "lb"
          image: { get_param: lb_vm_image }
          networks:
            - network: { get_resource: openshift_network }
          flavor: { get_param: lb_vm_flavor }
          metadata:
            groups: "lb,node_lbs"
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_lb }
            - { get_resource: secgroup_ext_access }
            - { get_resource: secgroup_infra }
            - { get_resource: secgroup_common }
          scheduler_hints:
            group: { get_resource: lb }
          vol_name_suffix: "data"
          vol_size: { get_param: lb_vol_size }

  nfs_vm_group:
    type: OS::Heat::ResourceGroup
    depends_on: "openshift_subnet"
    properties:
      count: { get_param: nfs_vm_group_size }
      resource_def:
        type: vm_with_volume.yaml
        properties:
          vm_name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: "nfs"
          image: { get_param: nfs_vm_image }
          networks:
            - network: { get_resource: openshift_network }
          flavor: { get_param: nfs_vm_flavor }
          metadata:
            group: "nfsservers"
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_nfs }
            - { get_resource: secgroup_infra }
            - { get_resource: secgroup_common }
          scheduler_hints:
            group: { get_resource: nfs }
          vol_name_suffix: "pvol"
          vol_size: { get_param: nfs_vol_size }

  master_vm_group:
    type: OS::Heat::ResourceGroup
    depends_on: "openshift_subnet"
    properties:
      count: { get_param: master_vm_group_size }
      resource_def:
        type: OS::Nova::Server
        properties:
          name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: "master"
          image: { get_param: master_vm_image }
          networks:
            - network: { get_resource: openshift_network }
          flavor: { get_param: master_vm_flavor }
          metadata:
            groups: "masters,node_masters"
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_infra }
            - { get_resource: secgroup_common }
            - { get_resource: secgroup_master }
          scheduler_hints:
            group: { get_resource: master }

  node_ssd_vm_group:
    type: OS::Heat::ResourceGroup
    depends_on: "openshift_subnet"
    properties:
      count: { get_param: node_ssd_vm_group_size }
      resource_def:
        type: OS::Nova::Server
        properties:
          name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: "ssd"
          image: { get_param: node_ssd_vm_image }
          networks:
            - network: { get_resource: openshift_network }
          flavor: { get_param: node_ssd_vm_flavor }
          metadata:
            group: "ssd"
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_node }
            - { get_resource: secgroup_common }
          scheduler_hints:
            group: { get_resource: node_ssd }

outputs:
