---
heat_template_version: newton

description: >
  Provision resources for OpenShift.

parameters:
  env_name:
    description: >
      A name for the OpenShift environment to be used for naming resources.
    type: string
    default: { get_param: 'OS::stack_name' }
  key_name:
    description: >
      The name of the SSH key to initially insert into VMs.
    type: string
  secgroup_ext_access_rules:
    description: >
      Rules for the security group that governs external access to the system.
    type: json
  lb_vm_group_size:
    description: >
      How many load balancer VMs to start.
    type: number
  lb_vm_image:
    description: >
      What OpenStack image to use for load balancer hosts.
    type: string
  lb_vm_flavor:
    description: >
      What OpenStack flavor to use for load balancer VMs.
    type: string
  lb_vol_size:
    description: >
      The size of the Cinder volume to attach to LB VMs.
    type: number
  nfs_vm_group_size:
    description: >
      How many NFS VMs to start.
    type: number
  nfs_vm_image:
    description: >
      What OpenStack image to use for NFS hosts.
    type: string
  nfs_vm_flavor:
    description: >
      What OpenStack flavor to use for NFS VMs.
    type: string
  nfs_vol_size:
    description: >
      The size of the Cinder volume to attach to NFS VMs.
    type: number
  master_vm_group_size:
    description: >
      How many master VMs to start.
    type: number
  master_vm_image:
    description: >
      What OpenStack image to use for master hosts.
    type: string
  master_vm_flavor:
    description: >
      What OpenStack flavor to use for master VMs.
    type: string
  node_ssd_vm_group_size:
    description: >
      How many SSD node VMs to start.
    type: number
  node_ssd_vm_image:
    description: >
      What OpenStack image to use for SSD nodes.
    type: string
  node_ssd_vm_flavor:
    description: >
      What OpenStack flavor to use for SSD node VMs.
    type: string
  secgroup_id_infra:
    description: >
      Id of infra security group
    type: string
  secgroup_id_common:
    description: >
      Id of common security group
    type: string
  network_id:
    description: >
      Id of cluster network
    type: string

resources:

  #-----------------------------------
  # Security groups
  #-----------------------------------

  secgroup_lb:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: lb
      rules:
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
          remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_common }
        - protocol: tcp
          port_range_min: 443
          port_range_max: 443
          remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_common }
        - protocol: tcp
          port_range_min: 8443
          port_range_max: 8443
          remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_common }

  secgroup_ext_access:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: "ext-access"
      rules: { get_param: secgroup_ext_access_rules }

  secgroup_master:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: master
      rules:
        - protocol: udp
          port_range_min: 53
          port_range_max: 53
          remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_common }
        - protocol: tcp
          port_range_min: 53
          port_range_max: 53
          remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_common }
        - protocol: tcp
          port_range_min: 8443
          port_range_max: 8443
          remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_common }

  secgroup_nfs:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: nfs
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_common }
          protocol: tcp
          port_range_min: 2049
          port_range_max: 2049

  secgroup_node:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: node
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_infra }

  #-----------------------------------
  # Nova server groups (anti-affinity)
  #-----------------------------------

  lb:
    type: OS::Nova::ServerGroup
    properties:
      name: lb
      policies: ['anti-affinity']

  nfs:
    type: OS::Nova::ServerGroup
    properties:
      name: nfs
      policies: ['anti-affinity']

  master:
    type: OS::Nova::ServerGroup
    properties:
      name: master
      policies: ['anti-affinity']

  node_ssd:
    type: OS::Nova::ServerGroup
    properties:
      name: node_ssd
      policies: ['anti-affinity']

  #-----------------------------------
  # VM resource groups
  #-----------------------------------

  lb_vm_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: lb_vm_group_size }
      resource_def:
        type: vm_with_volume.yaml
        properties:
          vm_name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: "lb"
          image: { get_param: lb_vm_image }
          networks:
            - network: { get_param: network_id }
          flavor: { get_param: lb_vm_flavor }
          metadata:
            groups: "lb,node_lbs"
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_lb }
            - { get_resource: secgroup_ext_access }
            - { get_param: secgroup_id_infra }
            - { get_param: secgroup_id_common }
          scheduler_hints:
            group: { get_resource: lb }
          vol_name_suffix: "data"
          vol_size: { get_param: lb_vol_size }

  nfs_vm_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: nfs_vm_group_size }
      resource_def:
        type: vm_with_volume.yaml
        properties:
          vm_name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: "nfs"
          image: { get_param: nfs_vm_image }
          networks:
            - network: { get_param: network_id }
          flavor: { get_param: nfs_vm_flavor }
          metadata:
            group: "nfsservers"
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_nfs }
            - { get_param: secgroup_id_infra }
            - { get_param: secgroup_id_common }
          scheduler_hints:
            group: { get_resource: nfs }
          vol_name_suffix: "pvol"
          vol_size: { get_param: nfs_vol_size }

  master_vm_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: master_vm_group_size }
      resource_def:
        type: OS::Nova::Server
        properties:
          name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: "master"
          image: { get_param: master_vm_image }
          networks:
            - network: { get_param: network_id }
          flavor: { get_param: master_vm_flavor }
          metadata:
            groups: "masters,node_masters"
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_param: secgroup_id_infra }
            - { get_param: secgroup_id_common }
            - { get_resource: secgroup_master }
          scheduler_hints:
            group: { get_resource: master }

  node_ssd_vm_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: node_ssd_vm_group_size }
      resource_def:
        type: OS::Nova::Server
        properties:
          name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: "ssd"
          image: { get_param: node_ssd_vm_image }
          networks:
            - network: { get_param: network_id }
          flavor: { get_param: node_ssd_vm_flavor }
          metadata:
            group: "ssd"
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_node }
            - { get_param: secgroup_id_common }
          scheduler_hints:
            group: { get_resource: node_ssd }
