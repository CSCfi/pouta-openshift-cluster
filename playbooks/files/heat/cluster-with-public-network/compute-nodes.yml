---
heat_template_version: newton

description: >
  Provision compute node resource groups for OpenShift with public IP network.

parameters:
  env_name:
    description: >
      A name for the OpenShift environment to be used for naming resources.
    type: string
    default: { get_param: 'OS::stack_name' }
  name_suffix:
    description: >
      A suffix to use for naming resources created.
    type: string
  key_name:
    description: >
      The name of the SSH key to initially insert into VMs.
    type: string
  secgroup_id_common:
    description: >
      Id of common security group
    type: string
  secgroup_id_infra:
    description: >
      Id of infra security group
    type: string
  secgroup_id_ext_access:
    description: >
      Id of external access security group
    type: string
  compute_node_group_size:
    description: >
      How many compute nodes to start.
    type: number
  compute_node_image:
    description: >
      What OpenStack image to use for these compute nodes.
    type: string
  network_id:
    description: >
      Id of cluster network
    type: string
  subnet_id:
    description: >
      Id of cluster subnet. Currently needs to be included in the params even if
      not used because it is a base stack output.
    type: string
  network_prefix:
    description: >
      The first two (/16) or three (/24) octets of a private network CIDR.
    type: string
    default: "192.168"
  compute_node_resource_group_identifier:
    description: >
      The part of the cluster IP address that differentiates this compute node
      resource group. Comes after network prefix but before index (1-9). Ends
      with a dot (when cluster network is /16) or not (when cluster network is
      /24).
    type: string
    default: "6."
  compute_node_flavor:
    description: >
      What OpenStack flavor to use for compute nodes.
    type: string
  compute_node_flavor_update_policy:
    description: >
      What to do when the flavor of compute nodes is changed.
      Possible values are RESIZE and REPLACE. Sometimes RESIZE is not
      possible, but it is the default to be on the safe side.
    type: string
    default: "RESIZE"
  ansible_group_name:
    description: >
      What Ansible group these compute nodes should be be placed in.
    type: string
  public_ip_network_id:
    description: >
      Id of public IP network
    type: string

resources:

  compute_node_servergroup:
    type: OS::Nova::ServerGroup
    properties:
      name:
        str_replace:
          template: compute_node-name_suffix
          params:
            name_suffix: { get_param: name_suffix }
      policies: ['anti-affinity']

  secgroup_node:
    type: ../common/secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: { get_param: name_suffix }
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_infra }

  compute_node_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: compute_node_group_size }
      removal_policies: [{'resource_list': ['0']}]
      resource_def:
        type: OS::Nova::Server
        properties:
          name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: { get_param: name_suffix }
          image: { get_param: compute_node_image }
          networks:
            - network: { get_param: network_id }
              fixed_ip:
                str_replace:
                  template: network_prefix.compute_node_resource_group_identifier%index%
                  params:
                    network_prefix: { get_param: network_prefix }
                    compute_node_resource_group_identifier: { get_param: compute_node_resource_group_identifier }
            - network: { get_param: public_ip_network_id }
          flavor: { get_param: compute_node_flavor }
          flavor_update_policy: { get_param: compute_node_flavor_update_policy }
          metadata:
            group: { get_param: ansible_group_name }
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_node }
            - { get_param: secgroup_id_common }
          scheduler_hints:
            group: { get_resource: compute_node_servergroup }
