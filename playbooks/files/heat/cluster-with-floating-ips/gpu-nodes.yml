---
heat_template_version: newton

description: >
  Provision GPU nodes for OpenShift with Cinder volumes

parameters:
  env_name:
    description: >
      A name for the OpenShift environment to be used for naming resources.
    type: string
    default: { get_param: 'OS::stack_name' }
  name_suffix:
    description: >
      A suffix to use for naming resources created.
    type: string
  key_name:
    description: >
      The name of the SSH key to initially insert into VMs.
    type: string
  secgroup_id_common:
    description: >
      Id of common security group
    type: string
  secgroup_id_infra:
    description: >
      Id of infra security group
    type: string
  secgroup_id_ext_access:
    description: >
      Id of external access security group
    type: string
  gpu_node_group_size:
    description: >
      How many virtual machines to put in the GPU cluster.
    type: number
  gpu_node_image:
    description: >
      What OpenStack image to use for the GPU hosts.
    type: string
  gpu_node_server_group_id:
    description: >
      A common server group id to use for nodes created. Not used when
      use_common_server_group is set to false.
    type: string
  use_common_server_group:
    description: >
      Whether we should use the common server group for nodes or use one we
      create ourselves.
    type: boolean
    default: false
  network_id:
    description: >
      Id of cluster network
    type: string
  subnet_id:
    description: >
      Id of cluster subnet. Currently needs to be included in the params even if
      not used because it is a base stack output.
    type: string
  compute_node_server_group_id:
    description: >
      A common server group id to use for the compute nodes created. Currently
      needs to be included in the params even if not used because it is a base
      stack output.
    type: string
  network_prefix:
    description: >
      The first two (/16) or three (/24) octets of a private network CIDR.
    type: string
    default: "192.168"
  gpu_node_resource_group_identifier:
    description: >
      The part of the cluster IP address that differentiates this gpu node
      resource group. Comes after network prefix but before index (1-9). Ends
      with a dot (when cluster network is /16) or not (when cluster network is
      /24).
    type: string
    default: "9."
  gpu_node_vol_size:
    description: >
      The size of the Cinder volume to attach to the GPU VMs.
    type: number
  gpu_node_flavor:
    description: >
      What OpenStack flavor to use for gpu nodes.
    type: string
  ansible_group_name:
    description: >
      What Ansible group these gpu nodes should be be placed in.
    type: string

conditions:
  use_common_server_group:
    equals:
    - get_param: use_common_server_group
    - true

resources:

  gpu_node_servergroup:
    type: OS::Nova::ServerGroup
    properties:
      name:
        str_replace:
          template: gpu_node-name_suffix
          params:
            name_suffix: { get_param: name_suffix }
    condition: { not: 'use_common_server_group' }

  secgroup_node:
    type: ../common/secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: { get_param: name_suffix }
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_param: secgroup_id_infra }

  gpu_node_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: gpu_node_group_size }
      removal_policies: [{'resource_list': ['0']}]
      resource_def:
        type: ../common/vm_with_volume.yaml
        properties:
          vm_name:
            str_replace:
              template: env_name-name_suffix-%index%
              params:
                env_name: { get_param: env_name }
                name_suffix: { get_param: name_suffix }
          image: { get_param: gpu_node_image }
          networks:
            - network: { get_param: network_id }
              fixed_ip:
                str_replace:
                  template: network_prefix.gpu_node_resource_group_identifier%index%
                  params:
                    network_prefix: { get_param: network_prefix }
                    gpu_node_resource_group_identifier: { get_param: gpu_node_resource_group_identifier }
          flavor: { get_param: gpu_node_flavor }
          metadata:
            groups: gpu
            stack: { get_param: env_name }
          key_name: { get_param: key_name }
          security_groups:
            - { get_resource: secgroup_node }
            - { get_param: secgroup_id_common }
            - { get_param: secgroup_id_infra }
          scheduler_hints:
            group:
              if:
                - 'use_common_server_group' # condition
                - get_param: gpu_node_server_group_id # condition true
                - get_resource: gpu_node_servergroup # condition false
          vol_name_suffix: "vol"
          vol_size: { get_param: gpu_node_vol_size }
