- name: make sure kube-state-metrics service exists
  k8s:
    state: present
    namespace: "{{ monitoring_namespace }}"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: kube-state-metrics
        labels:
          k8s-app: kube-state-metrics
        annotations:
          prometheus.io/scrape: 'true'
      spec:
        ports:
          - name: http-metrics
            port: 8080
            targetPort: http-metrics
            protocol: TCP
          - name: telemetry
            port: 8081
            targetPort: telemetry
            protocol: TCP
        selector:
          k8s-app: kube-state-metrics

- name: make sure kube-state-metrics service account exists
  k8s:
    state: present
    namespace: "{{ monitoring_namespace }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: kube-state-metrics

- name: make sure kube-state-metrics role exists
  k8s:
    state: present
    namespace: "{{ monitoring_namespace }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: kube-state-metrics-resizer
      rules:
        - apiGroups: [""]
          resources:
            - pods
          verbs: ["get"]
        - apiGroups: ["extensions"]
          resources:
            - deployments
          resourceNames: ["kube-state-metrics"]
          verbs: ["get", "update"]

- name: make sure kube-state-metrics role binding exists
  k8s:
    state: present
    namespace: "{{ monitoring_namespace }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: kube-state-metrics
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: kube-state-metrics-resizer
      subjects:
        - kind: ServiceAccount
          name: kube-state-metrics
          namespace: "{{ monitoring_namespace }}"

- name: make sure kube-state-metrics cluster role exists
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: kube-state-metrics
      rules:
        - apiGroups: [""]
          resources:
            - configmaps
            - secrets
            - nodes
            - pods
            - services
            - resourcequotas
            - replicationcontrollers
            - limitranges
            - persistentvolumeclaims
            - persistentvolumes
            - namespaces
            - endpoints
          verbs: ["list", "watch"]
        - apiGroups: ["extensions"]
          resources:
            - daemonsets
            - deployments
            - replicasets
            - ingresses
          verbs: ["list", "watch"]
        - apiGroups: ["apps"]
          resources:
            - daemonsets
            - deployments
            - replicasets
            - statefulsets
          verbs: ["list", "watch"]
        - apiGroups: ["batch"]
          resources:
            - cronjobs
            - jobs
          verbs: ["list", "watch"]
        - apiGroups: ["autoscaling"]
          resources:
            - horizontalpodautoscalers
          verbs: ["list", "watch"]
        - apiGroups: ["policy"]
          resources:
            - poddisruptionbudgets
          verbs: ["list", "watch"]
        - apiGroups: ["certificates.k8s.io"]
          resources:
            - certificatesigningrequests
          verbs: ["list", "watch"]
        - apiGroups: ["storage.k8s.io"]
          resources:
            - storageclasses
          verbs: ["list", "watch"]
        - apiGroups: ["autoscaling.k8s.io"]
          resources:
            - verticalpodautoscalers
          verbs: ["list", "watch"]


- name: make sure kube-state-metrics cluster role binding exists
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: kube-state-metrics
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: kube-state-metrics
      subjects:
        - kind: ServiceAccount
          name: kube-state-metrics
          namespace: "{{ monitoring_namespace }}"

- name: make sure kube-state-metrics deployment exists
  k8s:
    state: present
    namespace: "{{ monitoring_namespace }}"
    force: yes
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: kube-state-metrics
      spec:
        selector:
          matchLabels:
            k8s-app: kube-state-metrics
        replicas: "{{ poc_kube_state_metrics_replicas|default(1) }}"
        template:
          metadata:
            labels:
              k8s-app: kube-state-metrics
          spec:
            serviceAccountName: kube-state-metrics
            nodeSelector:
              node-role.kubernetes.io/infra: 'true'
            containers:
              - name: kube-state-metrics
                image: quay.io/coreos/kube-state-metrics:v1.7.1
                ports:
                  - name: http-metrics
                    containerPort: 8080
                  - name: telemetry
                    containerPort: 8081
                readinessProbe:
                  httpGet:
                    path: /healthz
                    port: 8080
                  initialDelaySeconds: 5
                  timeoutSeconds: 5
                resources:
                  limits:
                    cpu: 1
                    memory: 1Gi
                  requests:
                    cpu: 500m
                    memory: 512Mi
