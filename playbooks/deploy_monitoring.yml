---

- name: Deploy monitoring
  hosts: masters
  run_once: true
  roles:
    - role: poc_facts
  tasks:
    - name: install python-passlib
      retries: 3
      delay: 20
      register: yumresult
      until: yumresult.failed is false
      yum:
        name: python-passlib
        state: present

    - name: create temp directory for templating
      tempfile:
        state: directory
      register: mktemp
      changed_when: False

    - name: check if monitoring project exists
      command: oc get project monitoring-infra
      register: existing_monitoring_project
      changed_when: false
      failed_when: false

    - name: create project definition
      template:
        src: infra-project.yaml.j2
        dest: "{{ mktemp.path }}/infra-project.yaml"
      vars:
        name: monitoring-infra
        labels: {}
        annotations:
          openshift.io/node-selector: ""
      changed_when: no

    - name: create project monitoring-infra
      command: oc create -f "{{ mktemp.path }}/infra-project.yaml"
      when: existing_monitoring_project.stdout_lines | length == 0

    - name: create htpasswd access token file
      htpasswd:
        path: "{{ mktemp.path }}/proxy-htpasswd"
        name: token
        password: "{{ monitoring_access_token }}"

    - name: register htpasswd contents
      slurp:
        src: "{{ mktemp.path }}/proxy-htpasswd"
      register: proxy_htpasswd

    - name: upsert secret in monitoring-infra
      oc_secret:
        state: present
        namespace: monitoring-infra
        name: monitoring-token
        contents:
        # this comes from 'slurp' module and needs to be decoded
        - path:  htpasswd
          data: "{{ proxy_htpasswd['content']| b64decode }}"
        - path: token
          data: "{{ monitoring_access_token }}"

    - name: upsert prometheus data volume
      include: tasks/upsert_k8s_object.yml
      vars:
        namespace: monitoring-infra
        template_base_name: pvc.yaml.j2
        name: prometheus-data
        labels: {}
        size: "{{ prometheus_pvc_size|default('10Gi') }}"
        storage_class: "{{ prometheus_pvc_storage_class|default('') }}"
        upsert_replace: false
      when: not skip_pvc|default(false)

    - name: upsert prometheus deployment
      include: tasks/upsert_k8s_object.yml
      vars:
        namespace: monitoring-infra
        template_base_name: prometheus.yaml.j2
        name: prometheus

    - name: upsert secret for heketi-metrics-exporter
      oc_secret:
        state: present
        namespace: glusterfs
        name: monitoring-token
        contents:
        # this comes from 'slurp' module and needs to be decoded
        - path:  htpasswd
          data: "{{ proxy_htpasswd['content']| b64decode }}"

    - name: upsert heketi-metrics-exporter deployment
      include: tasks/upsert_k8s_object.yml
      vars:
        namespace: glusterfs
        template_base_name: heketi-metrics-exporter.yaml.j2
        name: heketi-metrics-exporter
        data:
          htpasswd: "{{ proxy_htpasswd['content'] }}"
          token: "{{ monitoring_access_token | b64encode }}"

    - name: upsert kube-state-metrics deployment
      include: tasks/upsert_k8s_object.yml
      vars:
        namespace: monitoring-infra
        template_base_name: "{{ item | basename }}"
        template_sub_dir: "kube-state-metrics/"
        name: "{{ item | basename }}"
      with_fileglob:
        - templates/kube-state-metrics/kube-state-metrics-*

    - name: upsert grafana data volume
      include: tasks/upsert_k8s_object.yml
      vars:
        namespace: monitoring-infra
        template_base_name: pvc.yaml.j2
        name: grafana-data
        labels: {}
        size: "1Gi"
        upsert_replace: false
      when: not skip_pvc|default(false)

    - name: upsert grafana deployment
      include: tasks/upsert_k8s_object.yml
      vars:
        namespace: monitoring-infra
        template_base_name: grafana.yaml.j2
        name: grafana

    - name: delete temp directory
      file:
        path: "{{ mktemp.path }}"
        state: absent
      changed_when: False
      check_mode: no

    - name: upsert influxdb deployment
      include: tasks/upsert_k8s_object.yml
      vars:
        namespace: monitoring-infra
        template_base_name: "{{ item | basename }}"
        template_sub_dir: "influxdb/"
        name: "influxdb-{{ item | basename }}"
      with_fileglob:
        - templates/influxdb/influxdb-*

    - name: wait for influxdb to start
      uri:
        url: http://influxdb.monitoring-infra.svc.cluster.local:8086/ping
        method: GET
      failed_when: false
      register: influxdb_up
      until: influxdb_up.status|default(999) == 204
      retries: 60
      delay: 10

    - name: create an admin user for influxdb
      uri:
        url: http://influxdb.monitoring-infra.svc.cluster.local:8086/query
        method: POST
        body: "q=CREATE USER admin WITH PASSWORD '{{ monitoring_access_token }}' WITH ALL PRIVILEGES"
        status_code:
        - 200
        - 401

    - when: influxdb_create_prom_db|default(True)|bool
      block:
      - name: create a db for prometheus in influxdb
        uri:
          url: http://influxdb.monitoring-infra.svc.cluster.local:8086/query
          method: POST
          body: "q=CREATE DATABASE prometheus"
          user: "admin"
          password: "{{ monitoring_access_token }}"
          status_code:
          - 200

      - name: setup a default retention policy for the prometheus db
        uri:
          url: http://influxdb.monitoring-infra.svc.cluster.local:8086/query
          method: POST
          body: >
            q=CREATE RETENTION POLICY
            "1m"
            ON "prometheus"
            DURATION {{ influxdb_prom_db_default_rp | default('1d') }}
            REPLICATION 1
            DEFAULT
          user: "admin"
          password: "{{ monitoring_access_token }}"
          status_code:
          - 200

      - name: run additional queries against InfluxDB (downsampling etc.)
        uri:
          url: http://influxdb.monitoring-infra.svc.cluster.local:8086/query
          method: POST
          body: "q={{ item }}"
          user: "admin"
          password: "{{ monitoring_access_token }}"
          status_code:
          - 200
        with_items: "{{ influxdb_additional_queries }}"
      # end block

    - name: create a user with read access to the prometheus db in influxdb
      uri:
        url: http://influxdb.monitoring-infra.svc.cluster.local:8086/query
        method: POST
        body: "{{ item }}"
        user: "admin"
        password: "{{ monitoring_access_token }}"
        status_code:
        - 200
      no_log: yes
      with_items:
        - "q=CREATE USER prom_reader WITH PASSWORD '{{ influxdb_prom_reader_password }}'"
        - 'q=GRANT READ ON "prometheus" TO "prom_reader"'

    - name: upsert influxdb backup job
      include: tasks/upsert_k8s_object.yml
      vars:
        namespace: monitoring-infra
        template_base_name: "{{ item | basename }}"
        template_sub_dir: "influxdb/"
        name: "influxdb-{{ item | basename }}"
      with_fileglob:
        - templates/influxdb/backup-*

- name: Populate grafana
  hosts: localhost
  connection: local
  gather_facts: no
  roles:
    - poc_facts
  tasks:
    - name: wait for grafana to start responding
      uri:
        url: https://grafana.{{ openshift_public_hostname }}/api/health
        method: GET
        user: admin
        password: "{{ monitoring_access_token }}"
        force_basic_auth: yes
      failed_when: false
      register: grafana_up
      until: grafana_up.status|default(999) == 200
      retries: 60
      delay: 10

    - name: check if prometheus datasource exists already
      uri:
        url: https://grafana.{{ openshift_public_hostname }}/api/datasources/name/local
        method: GET
        user: admin
        password: "{{ monitoring_access_token }}"
        force_basic_auth: yes
        status_code:
        - 200
        - 404
      register: prometheus_existing_datasource

    - name: check if default influxdb datasources exist already
      uri:
        url: https://grafana.{{ openshift_public_hostname }}/api/datasources/name/influxdb_{{ item.key }}
        method: GET
        user: admin
        password: "{{ monitoring_access_token }}"
        force_basic_auth: yes
        status_code:
        - 200
        - 404
      register: influxdb_existing_default_datasources
      with_dict:
        prometheus:
          interval: "1m"
        _internal:
          interval: "1m"

    - name: check if additional influxdb datasources exist
      uri:
        url: https://grafana.{{ openshift_public_hostname }}/api/datasources/name/influxdb_{{ item.key }}
        method: GET
        user: admin
        password: "{{ monitoring_access_token }}"
        force_basic_auth: yes
        status_code:
        - 200
        - 404
      with_dict: "{{ influxdb_databases }}"
      register: influxdb_existing_additional_datasources

    - name: add prometheus as a data source
      uri:
        url: https://grafana.{{ openshift_public_hostname }}/api/datasources
        method: POST
        user: admin
        password: "{{ monitoring_access_token }}"
        body: "{{ lookup('template','grafana_prometheus_ds.json.j2') }}"
        force_basic_auth: yes
        status_code: 200
        body_format: json
      when: prometheus_existing_datasource.status != 200

    - name: add default influxdb data sources
      vars:
        - influxdb_database_name: "{{ item.item.key }}"
        - influxdb_database_interval: "{{ item.item.value.interval }}"
      uri:
        url: https://grafana.{{ openshift_public_hostname }}/api/datasources
        method: POST
        user: admin
        password: "{{ monitoring_access_token }}"
        body: "{{ lookup('template','grafana_influxdb_ds.json.j2') }}"
        force_basic_auth: yes
        status_code: 200
        body_format: json
      with_items: "{{ influxdb_existing_default_datasources.results }}"
      when: item.status != 200

    - name: add additional influxdb data sources
      vars:
        - influxdb_database_name: "{{ item.item.key }}"
        - influxdb_database_interval: "{{ item.item.value.interval }}"
      uri:
        url: https://grafana.{{ openshift_public_hostname }}/api/datasources
        method: POST
        user: admin
        password: "{{ monitoring_access_token }}"
        body: "{{ lookup('template','grafana_influxdb_ds.json.j2') }}"
        force_basic_auth: yes
        status_code: 200
        body_format: json
      no_log: yes
      with_items: "{{ influxdb_existing_additional_datasources.results }}"
      when: item.status != 200

    - name: add or update Grafana dashboards
      uri:
        url: https://grafana.{{ openshift_public_hostname }}/api/dashboards/db
        method: POST
        user: admin
        password: "{{ monitoring_access_token }}"
        body: "{{ item }}"
        force_basic_auth: yes
        status_code: 200
        body_format: json
      with_items:
        - "{{ lookup('file','files/grafana_k8s_dashboard.json') }}"
        - "{{ lookup('template','files/grafana_influxdb_dashboard.json.j2') }}"
        - "{{ lookup('file', 'files/grafana_influxdb_metamonitoring_dashboard.json') }}"
